/*
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;


public class Octree
{

	private int childID;
//	private Vector3 anchor;
	private Vector3 center = new Vector3();
	private float size = 1;

	private Octree parent = null;
	private Octree[] children = new Octree[8];
	private int depth = 0;
	private float value = -1;
	private Octree root = null;
	private Vector3 normal;
	private Vector3 average;
	private int count;
	private GameObject geometery;
	private int globalID;
	private bool occupied;

	int minimumForGeometery = 5;
	int geometeryUpdateInterval = 10;
	public Octree() {
		}


	public Octree (Vector3 center, float size)
	{
		this.center = center;
		this.size = size;
	}

	public Octree Parent {
		get {
			return parent;
		}
	}

	public bool Occupied {
		get {
			return occupied;
		}
	}

	public int ChildID {
		get {
			return childID;
		}
	}

	public void AdjustWeight(Vector3 p, Vector3 n, float weight) {
		value += weight;
	}

	public float Size {
		get {
			return size;
		}
		set {
			size = value;
		}

	}

	public Vector3 Center {
		get {
			return center;
		}
		set {
			center = value;
		}
	}

	public Octree Root {
		get {
			return root;
		}
		set {
			root = value;
		}
	}

	public Octree GetOrCreateChild(int index) {
		if (children [index] == null) {
			children[index] = new Octree(center, size/2);
			Vector3 offset = new Vector3(-size/2, -size/2, -size/2);
			if((index & 1)>0)
				offset.x += size;
			if((index & 2)>0)
				offset.y += size;
			if((index & 4)>0)
				offset.z += size;
			children[index].center += offset;
			children[index].size = size/2;
			children[index].childID = index;
			children[index].parent = this;
			children[index].depth = depth+1;
		}
		return children [index];
	}

	public Octree Insert(Vector3 p, Vector3 n, float weight, int level) {
		if (depth == level) {
			AdjustWeight (p, n, weight);
			return this;
		}

		int index = 0;
		if (p.x > center.x)
			index |= 1;
		if (p.y > center.y)
			index |= 2;
		if (p.z > center.z)
			index |= 4;
	
		return GetOrCreateChild (index).Insert (p, n, weight, level);
	}

	public void Draw() {
		Color c = Color.red;
		Debug.DrawLine (new Vector3 (center.x - size, center.y, center.z),
		               new Vector3 (center.x + size, center.y, center.z), c);
		Debug.DrawLine (new Vector3 (center.x , center.y - size, center.z),
		                new Vector3 (center.x , center.y + size, center.z), c);
		Debug.DrawLine (new Vector3 (center.x, center.y, center.z - size),
		                new Vector3 (center.x, center.y, center.z + size), c);

		foreach (Octree o in children) {
			if(o != null)
				o.Draw();
		}
	}

	public void Clear() {

		for(int i = 0; i < 8; i++) {
			if(children[i] != null)
				children[i].Clear();
			children[i] = null;
		}

		occupied = false;
		count = 0;
		globalID = -1;

		if(geometery != null)
			GameObject.Destroy(geometery);

	}


	public void IncrementallyAddPoint(Vector3 point, Vector3 ray) {

		if(count == 0) {
			average = point;
			normal = ray;
			return;
		}

		float weight = 1.0f/(count+3);//the demoniator gives more wieght to the initial normal
//		Vector3 a = point - average;
//		Vector3 adjNormal = Vector3.Cross(a, Vector3.Cross(normal, a)).normalized;
//		float err = Vector3.Dot (normal, a);
//		normal = (normal*(1-weight) + weight*adjNormal).normalized;
		average = average*(1-weight) + weight*point;

	}
	
	public void CreateLocalGeometery(){
		occupied = true;
		geometery = GameObject.CreatePrimitive(PrimitiveType.Quad);
//		geometery = GameObject.CreatePrimitive(PrimitiveType.Cube);
		geometery.transform.position = average;
		geometery.transform.rotation = Quaternion.LookRotation(-normal);
//		geometery.transform.localScale = new Vector3(2*size, 2*size,2*size);
		geometery.transform.localScale = new Vector3(size, size,size);
	}
	/*
	public void CreateLocalMeshGeometery(int targetDepth, ref Vector3[] vertices, ref Vector3[] normals, ref int[] triangles, ref int triangleCount) {
		CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);

		Octree leftCell  = root.QueryPoint(center - new Vector3(2*size, 0, 0),targetDepth);
		Octree rightCell = root.QueryPoint(center + new Vector3(2*size, 0, 0),targetDepth);
		Octree frontCell = root.QueryPoint(center - new Vector3(0, 0, 2*size),targetDepth);
		Octree backCell  = root.QueryPoint(center + new Vector3(0, 0, 2*size),targetDepth);
		Octree downCell  = root.QueryPoint(center - new Vector3(0, 2*size, 0),targetDepth);
		Octree upCell    = root.QueryPoint(center + new Vector3(0, 2*size, 0),targetDepth);

		if(leftCell != null)
			leftCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
		if(rightCell != null)
			rightCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
		if(frontCell != null)
			frontCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
		if(backCell != null)
			backCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
		if(downCell != null)
			downCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
		if(upCell != null)
			upCell.CreateTriangles(targetDepth,ref vertices,ref normals,ref triangles,ref triangleCount);
	}*/

	public bool Insert(Vector3 point, Vector3 observationRay, int maxdepth, ref Vector3[] vertices, ref Vector3[] normals, ref int[] triangles, ref int vertexCount, ref int triangleCount) {
		IncrementallyAddPoint(point, observationRay);
		count++;

		if(depth == maxdepth) {
			if(count == minimumForGeometery) {
				globalID = vertexCount;
				occupied = true;
				vertices[globalID] = average;
				normals[globalID] = normal;
				vertexCount++;

//				CreateLocalGeometery();
//				CreateLocalMeshGeometery(maxdepth, ref vertices, ref normals, ref triangles, ref triangleCount);
				return true;
			}
			return false;
		}
		
		int index = 0;
		if(point.x > center.x)
			index += 1;
		if(point.y > center.y)
			index += 2;
		if(point.z > center.z)
			index += 4;
		return CreateChild(index).Insert(point, observationRay, maxdepth,ref vertices, ref normals, ref triangles, ref vertexCount, ref triangleCount);
	}

	public bool Insert(Vector3 point, Vector3 observationRay, int maxdepth) {

		IncrementallyAddPoint(point, observationRay);
		count++;
	
		if((count % geometeryUpdateInterval)== 0) {
			if(geometery != null) {
				geometery.transform.position = average;
				geometery.transform.rotation = Quaternion.LookRotation(normal);
			}
		}

		if(depth == maxdepth) {
			if(count == minimumForGeometery) {
				CreateLocalGeometery();
				return true;
			}
			return false;
		}

		int index = 0;
		if(point.x > center.x)
			index += 1;
		if(point.y > center.y)
			index += 2;
		if(point.z > center.z)
			index += 4;
		return CreateChild(index).Insert(point, observationRay, maxdepth);
	}

	public Octree QueryPoint(Vector3 point, int targetDepth) {
		if(depth == targetDepth)
			return this;

		int index = 0;
		if(point.x > center.x)
			index += 1;
		if(point.y > center.y)
			index += 2;
		if(point.z > center.z)
			index += 4;

		if(children[index] == null)
			return null;
		else
			return children[index].QueryPoint(point,targetDepth);
	}

	public Octree CreateChild(int index) {

		if(children[index] != null)
			return children[index];

		Octree o = new Octree();
		o.parent = this;
		o.root = root;
		o.childID = index;
		o.Center = new Vector3(center.x -size/2 + size*(index & 1), center.y -size/2 + size*((index>>1) & 1),center.z -size/2 + size*((index>>2)& 1));
		o.Size = size/2;
		o.depth = depth+1;
		o.normal = normal;

		//find the closest point on the plane the center projects onto.
		o.average = o.center - Vector3.Dot (o.Center - average, normal)*normal;

		children[index] = o;
		return children[index];

	}
}

